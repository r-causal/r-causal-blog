{
  "hash": "f248b55f41d84a934b551415f9ea3921",
  "result": {
    "markdown": "---\ntitle: \"Introducing halfmoon\"\nauthor: \"Malcolm Barrett\"\ndate: \"2023-06-02\"\ncategories: [news, code, analysis]\nimage: \"image.png\"\n---\n\n\nWe're thrilled to announce the initial release of the halfmoon package to CRAN!\nhalfmoon is a toolkit to assess balance in propensity-based models.\n\n<img src=\"/img/halfmoon.png\" align=\"right\" height=\"138\" fig-alt=\"the halfmoon package hexsticker: a japanese woodprint with a full moon and halfmoon written in cursive\"/>\n\n## Getting started with halfmoon\n\nhalfmoon is a toolkit for assessing balance in propensity score models. Additionally, it can help build your intuition for which populations various weighting and matching strategies are working. Let's explore some of the things halfmoon can help with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"halfmoon\")\nlibrary(halfmoon)\n```\n:::\n\n\nLet's take a look at an example using the built-in dataset, `nhefs_weights`. `nhefs_weights` is an extension of the `nhefs` dataset that includes a variety of propensity-score weights for the causal question: \"does quitting smoking increase weight?\" You can find the data for this question in the [causaldata](https://github.com/NickCH-K/causaldata) package. \n\n## Population-level balance\n\nThe main tool in halfmoon for assessing balance at the population level is `geom_mirrored_histogram()`.\n\nHere's the original, unweighted sample using `geom_mirrored_histogram()`. The histogram on top is the exposed population, those who quit smoking. The histogram on the bottom is the unexposed population, those who did not quit smoking. While there is a lot of overlap, it seems like the two groups are slightly different.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggokabeito)\n\nggplot(nhefs_weights, aes(.fitted)) +\n  geom_mirror_histogram(\n    aes(group = qsmk, fill = qsmk),\n    bins = 50\n  ) +\n  scale_fill_okabe_ito()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nLet's take a look at the same population weighted using [Average Treatment Effect (ATE) weights](https://www.r-causal.org/chapters/chapter-10.html#average-treatment-effect):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(nhefs_weights, aes(.fitted)) +\n  # plot the original distribution in dark grey\n  geom_mirror_histogram(\n    aes(group = qsmk),\n    bins = 50\n  ) +\n  geom_mirror_histogram(\n    aes(fill = qsmk, weight = w_ate),\n    bins = 50,\n    alpha = 0.5\n  ) + scale_y_continuous(labels = abs) +\n  scale_fill_okabe_ito()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nBoth groups are upweighted to be more similar.\n\nWith [Average Treatment Effect among the Treated (ATT) weights](https://www.r-causal.org/chapters/chapter-10.html#average-treatment-effect-among-the-treated), the untreated group is downweighted to be more similar to the treated group:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(nhefs_weights, aes(.fitted)) +\n  geom_mirror_histogram(\n    aes(group = qsmk),\n    bins = 50\n  ) +\n  geom_mirror_histogram(\n    aes(fill = qsmk, weight = w_att),\n    bins = 50,\n    alpha = 0.5\n  ) + scale_y_continuous(labels = abs) +\n  scale_fill_okabe_ito()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nMirrored histograms are really useful for the dual purpose of understanding how similar the weighted populations are and understanding exactly the population that is being analyzed. \n\n## Variable-level balance\n\nAnother perspective on balance is whether or not the distribution of confounders is similar between groups of the exposed. The propensity score model fit for these weights was:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(causaldata)\npropensity_model <- glm(\n  qsmk ~ sex +\n    race + age + I(age^2) + education +\n    smokeintensity + I(smokeintensity^2) +\n    smokeyrs + I(smokeyrs^2) + exercise + active +\n    wt71 + I(wt71^2),\n  family = binomial(),\n  # these data are loaded with the causaldata package\n  data = nhefs_complete\n)\n```\n:::\n\n\nOne way to assess if we achieved balance within the confounding variables is calculating the standardized mean difference (SMD) of the confounder between exposure groups. The closer the SMD is to 0, the more balanced the groups are on average. A common rule of thumb is to have the SMD be less than 0.1[^1].\n\n[^1]: But don't put too much faith in such quasirules.\n\nLet's calculate the SMDs for each variable using the different weights in `nhefs_weights`. halfmoon's `tidy_smd()` creates a dataset with the SMDs for each confounder, and `geom_love()` visualizes the relationship. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_df <- tidy_smd(\n  nhefs_weights,\n  race:active,\n  .group = qsmk,\n  .wts = starts_with(\"w_\")\n)\n\nggplot(\n  plot_df,\n  aes(\n    x = abs(smd),\n    y = variable,\n    group = method,\n    color = method\n  )\n) +\n  geom_love() +\n  scale_color_okabe_ito()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThis is called a Love plot, and you can use the `love_plot()` wrapper function to achieve the same goal:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlove_plot(plot_df) +\n  scale_color_okabe_ito()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nOne down side to SMD plots is that they only give you information about one statistic that focuses on the center of the variable. For a binary or categorical variable, that's usually enough, but for a continuous variable, we could be balanced in the mean but unbalanced in the tails.\n\nLet's take a look at `smokeyrs`, a continuish[^2] variable that represents the smoke-years a participant had prior to quitting smoking. We'll use the empirical cumulative distribution function (ECDF) to compare the differences between exposure groups across the range of `smokeyers`.\n\n[^2]: I call variables like this continuish because the number of years is represented as an integer. In theory, this concept is continuous, but because it is rounded to the year in the data, there are only 60 values in the variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  nhefs_weights,\n  aes(x = smokeyrs, color = qsmk)\n) +\n  geom_ecdf() +\n  xlab(\"Smoking Years\") +\n  ylab(\"Proportion <= x\") +\n  scale_color_okabe_ito()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nNow, let's take a look with the ATE weight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  nhefs_weights,\n  aes(x = smokeyrs, color = qsmk)\n) +\n  geom_ecdf(aes(weights = w_ato)) +\n  xlab(\"Smoking Years\") +\n  ylab(\"Proportion <= x\") +\n  scale_color_okabe_ito()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe balance is much better\n\n## Matching\n\nThe examples thus far have used propensity score weights, but we can use the same techniques by treating matching as an extreme case of weighting where the weight for an observation is either 1 (the observation is kept) or 0 (the observation is removed). \n\nhalfmoon's `bind_matches()` facilitates the comparison of many matched datasets by creating a dataset with these weights for each model.\n\nConsider these two objects from the [MatchIt](https://github.com/kosukeimai/MatchIt) documentation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MatchIt)\n# Default: 1:1 NN PS matching w/o replacement\nm.out1 <- matchit(treat ~ age + educ + race + nodegree +\n                   married + re74 + re75, data = lalonde)\n\n# 1:1 NN Mahalanobis distance matching w/ replacement and\n# exact matching on married and race\nm.out2 <- matchit(treat ~ age + educ + race + nodegree +\n                   married + re74 + re75, data = lalonde,\n                   distance = \"mahalanobis\", replace = TRUE,\n                  exact = ~ married + race)\n```\n:::\n\n\n`bind_matches()` creates a dataset with the original data plus the matching indicator that we'll use as weights:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatches <- bind_matches(lalonde, m.out1, m.out2)\nhead(matches)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     treat age educ   race married nodegree re74 re75       re78 m.out1 m.out2\nNSW1     1  37   11  black       1        1    0    0  9930.0460      1      1\nNSW2     1  22    9 hispan       0        1    0    0  3595.8940      1      1\nNSW3     1  30   12  black       0        0    0    0 24909.4500      1      1\nNSW4     1  27   11  black       0        1    0    0  7506.1460      1      1\nNSW5     1  33    8  black       0        1    0    0   289.7899      1      1\nNSW6     1  22    9  black       0        1    0    0  4056.4940      1      1\n```\n:::\n:::\n\n\nNow that we have variables we can use as weights, we can use the same techniques as with propensity score weighting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmany_matched_smds <- tidy_smd(\n  matches,\n  c(age, educ, race, nodegree, married, re74, re75), \n  .group = treat, \n  .wts = c(m.out1, m.out2)\n) \n\nlove_plot(many_matched_smds) +\n  scale_color_okabe_ito()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# use the distance as the propensity score\nmatches$ps <- m.out1$distance\n\nggplot(matches, aes(ps)) +\n    geom_mirror_histogram(\n        aes(group = factor(treat)),\n        bins = 50\n    ) +\n    geom_mirror_histogram(\n        aes(fill = factor(treat), weight = m.out1),\n        bins = 50,\n        alpha = 0.5\n    ) + \n  scale_y_continuous(labels = abs) +\n  scale_fill_okabe_ito()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Learn more in the book\n\nTo see an applied example of a causal analysis that makes use of halfmoon, check out [the second chapter of *Causal Inference in R*](https://www.r-causal.org/chapters/chapter-02.html).\n\n## Other techniques\n\nAnother way to assess the population created by weighting and matching is to use summary tables. We worked closely with the authors of [gtsummary](https://www.danieldsjoberg.com/gtsummary/) to support weighted tables. gtsummary is an incredible package for making easy, beautiful tables in R, and we highly recommend it. \n\nFor an example of how weighted tables can help you understand the population under analysis, check out the chapter on [causal estimands](https://www.r-causal.org/chapters/chapter-10.html) in *Causal Inference in R*.\n\n## Future work\n\nhalfmoon is early in its lifecycle, although we have been teaching these techniques for several years. Right now, the focus is on causal questions with binary exposures. However, these techniques generalize to other types of exposures, and we plan to fully support continuous and categorical exposures.\n\n## Related work\n\nhalfmoon has similar goals to the popular [cobalt](https://ngreifer.github.io/cobalt/) package. halfmoon is intended to be more focused and modular than cobalt, but you might prefer cobalt if you work exclusively with related packages like MatchIt and WeightIt.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}